@using TeslaSolarCharger.Shared.Resources.Contracts
@using TeslaSolarCharger.Shared.Helper.Contracts
@using TeslaSolarCharger.Shared.Dtos.BaseConfiguration
@using TeslaSolarCharger.Client.Dialogs
@inject HttpClient HttpClient
@inject IStringHelper StringHelper
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<GenericValueConfigurationComponent SourceName="MQTT"
                                    ConfigurationOverviews="_mqttConfigurationOverviews"
                                    OnRefreshClicked="RefreshRequestResults"
                                    OnConfigureClicked="id => OpenConfigurationDialog(id)"
                                    OnDeleteClicked="id => DeleteConfiguration(id)"></GenericValueConfigurationComponent>

@code {
    private List<DtoValueConfigurationOverview>? _mqttConfigurationOverviews;

    protected override async Task OnInitializedAsync()
    {
        await RefreshRequestResults();
    }

    private async Task RefreshRequestResults()
    {
        _mqttConfigurationOverviews = await HttpClient.GetFromJsonAsync<List<DtoValueConfigurationOverview>>("api/MqttConfiguration/GetMqttValueOverviews") ?? new List<DtoValueConfigurationOverview>();
    }

    private async Task OpenConfigurationDialog(int? id)
    {
        var options = new DialogOptions()
            {
                CloseButton = true,
                CloseOnEscapeKey = false,
                DisableBackdropClick = true,
            };
        var parameters = new DialogParameters<MqttValueConfigurationDialog>
        {
            { x => x.MqttConfigurationId, id },
        };
        var title = id == default ? "Add" : "Edit";
        var dialog = await DialogService.ShowAsync<MqttValueConfigurationDialog>($"{title} MQTT config", parameters, options);
        var result = await dialog.Result;
        await Task.Delay(TimeSpan.FromSeconds(3));
        await RefreshRequestResults();
    }

    private async Task DeleteConfiguration(int id)
    {
        var options = new DialogOptions()
            {
                CloseButton = true,
                CloseOnEscapeKey = true,
            };
        var parameters = new DialogParameters<DeleteDialog>
        {
            { x => x.ElementName, "the MQTT configuration" },
        };
        var dialog = await DialogService.ShowAsync<DeleteDialog>($"Delete MQTT config?", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await HttpClient.DeleteAsync($"api/MqttConfiguration/DeleteConfiguration?id={id}");
            Snackbar.Add("MQTT configuration deleted.", Severity.Success);
            await RefreshRequestResults();
        }
    }

}
