@page "/map"
@inject IJSRuntime JSRuntime

<h3>Map Selection</h3>

<div id="map" style="height: 400px;"></div>

<p>Center: @centerPoint</p>
<p>Radius: @radius meters</p>

<div>
    <label for="radiusInput">Radius (meters): </label>
    <input id="radiusInput" @bind="radius" @bind:event="oninput" @onchange="RadiusChanged" type="number" step="10" min="0" />
</div>

<h4>Coordinates List</h4>
<ul>
    @foreach (var coord in coordinates)
    {
        <li>@coord.Lat, @coord.Lng</li>
    }
</ul>

<div>
    <input @bind="newLat" type="number" step="0.000001" placeholder="Latitude" />
    <input @bind="newLng" type="number" step="0.000001" placeholder="Longitude" />
    <button @onclick="AddCoordinate">Add Coordinate</button>
</div>

@code {
    private string centerPoint = "Not selected";
    private double radius = 1000; // Default radius
    private List<Coordinate> coordinates = new List<Coordinate>();
    private double newLat;
    private double newLng;
    private double? lastLat;
    private double? lastLng;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeMap", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task UpdateSelection(double lat, double lng)
    {
        lastLat = lat;
        lastLng = lng;
        centerPoint = $"Lat: {lat:F6}, Lng: {lng:F6}";
        await JSRuntime.InvokeVoidAsync("updateCircle", lat, lng, radius);
        await AddCoordinateFromMap(lat, lng);
        StateHasChanged();
    }

    private async Task RadiusChanged()
    {
        if (lastLat.HasValue && lastLng.HasValue)
        {
            await JSRuntime.InvokeVoidAsync("updateCircle", lastLat.Value, lastLng.Value, radius);
        }
    }

    private async Task AddCoordinate()
    {
        var newCoord = new Coordinate { Lat = newLat, Lng = newLng };
        coordinates.Add(newCoord);
        await JSRuntime.InvokeVoidAsync("addMarker", newCoord.Lat, newCoord.Lng);
        newLat = 0;
        newLng = 0;
    }

    private async Task AddCoordinateFromMap(double lat, double lng)
    {
        var newCoord = new Coordinate { Lat = lat, Lng = lng };
        coordinates.Add(newCoord);
        StateHasChanged();
    }

    public class Coordinate
    {
        public double Lat { get; set; }
        public double Lng { get; set; }
    }
}