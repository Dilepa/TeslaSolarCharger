@using System.Diagnostics
@using TeslaSolarCharger.Shared.Dtos
@using TeslaSolarCharger.Shared.Dtos.IndexRazor.PvValues
@using TeslaSolarCharger.Shared.Resources.Contracts
@using System.Timers

@inject HttpClient HttpClient
@inject IConstants Constants

@if (_pvValues != default)
{
    <svg width="420" height="400" viewBox="0 0 420 400">
        <!-- Lines -->
        <line x1="70" y1="200" x2="210" y2="100" stroke="black" />
        <line x1="70" y1="200" x2="210" y2="300" stroke="black" />
        <line x1="210" y1="100" x2="350" y2="200" stroke="black" />
        <line x1="210" y1="300" x2="350" y2="200" stroke="black" />

        <!-- Circles -->
        <circle cx="70" cy="200" r="40" fill="lightblue" />
        <circle cx="210" cy="100" r="40" fill="orange" />
        <circle cx="210" cy="300" r="40" fill="pink" />
        <circle cx="350" cy="200" r="40" fill="lightgreen" />

        <!-- Text -->
        <foreignObject x="35" y="160" width="70" height="80">
            <div style="text-align: center;">
                <MudIcon Icon="@Constants.GridPoleIcon" Size="Size.Large" />
                <div>@_pvValues.GridPower W</div>
            </div>
        </foreignObject>

        <foreignObject x="175" y="60" width="70" height="80">
            <div style="text-align: center;">
                <MudIcon Icon="@Icons.Material.Filled.WbSunny" Size="Size.Large" />
                <div>@_pvValues.InverterPower W</div>
            </div>
        </foreignObject>

        <foreignObject x="175" y="260" width="70" height="80">
            <div style="text-align: center;">
                <MudIcon Icon="@Icons.Material.Filled.Home" Size="Size.Large" />
                <div>@CalculateHomePower() W</div>
            </div>
        </foreignObject>

        <foreignObject x="315" y="170" width="70" height="80">
            <div style="text-align: center;">
                <BatteryIcon StateOfCharge="@_pvValues.HomeBatterySoc" />
                <div>@_pvValues.HomeBatteryPower W</div>
            </div>
        </foreignObject>

        <!-- Animated balls -->
        @foreach (var ball in Balls)
        {
            <circle cx="@ball.X" cy="@ball.Y" r="5" fill="@ball.Color">
                <animate attributeName="cx" from="@ball.StartX" to="@ball.EndX" dur="@ball.Duration" repeatCount="indefinite" />
                <animate attributeName="cy" from="@ball.StartY" to="@ball.EndY" dur="@ball.Duration" repeatCount="indefinite" />
            </circle>
        }
    </svg>
}


@code {
    private List<Ball> Balls { get; set; } = new List<Ball>();
    private Timer? _ballUpdateTimer;

    private DtoPvValues? _pvValues;
    private bool? _isSolarEdgeInstallation;
    private bool? _couldNotRefreshStates;

    private Timer? _pvValueUpdateTimer;


    protected override async Task OnInitializedAsync()
    {
        var dtoSolarChargerInstallation = await HttpClient.GetFromJsonAsync<DtoValue<bool>>("api/Hello/IsSolarEdgeInstallation").ConfigureAwait(false);
        _isSolarEdgeInstallation = dtoSolarChargerInstallation?.Value;

        _pvValueUpdateTimer = new Timer();
        _pvValueUpdateTimer.Interval = Debugger.IsAttached ? 1000 : 5000;
        _pvValueUpdateTimer.Elapsed += async (_, _) => await RefreshPvValues().ConfigureAwait(false);
        _pvValueUpdateTimer.Start();
    }

    private async Task RefreshPvValues()
    {
        try
        {
            _pvValues = await HttpClient.GetFromJsonAsync<DtoPvValues>("api/Index/GetPvValues").ConfigureAwait(false);
            _couldNotRefreshStates = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _couldNotRefreshStates = true;
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        _ballUpdateTimer = new Timer(1000);
        _ballUpdateTimer.Elapsed += (sender, e) => UpdateBalls();
        _ballUpdateTimer.Start();
    }

    private void UpdateBalls()
    {
        if (_pvValues == default)
        {
            return;
        }
        Balls.Clear();

        if (_pvValues.InverterPower > 0)
        {
            Balls.Add(new Ball { StartX = 210, StartY = 100, EndX = 350, EndY = 200, Color = "yellow", Duration = "2s" });
        }

        if (_pvValues.GridPower > 0)
        {
            Balls.Add(new Ball { StartX = 70, StartY = 200, EndX = 350, EndY = 200, Color = "blue", Duration = "3s" });
        }

        if (_pvValues.HomeBatteryPower < 0)
        {
            Balls.Add(new Ball { StartX = 210, StartY = 300, EndX = 350, EndY = 200, Color = "red", Duration = "2.5s" });
        }
        else if (_pvValues.HomeBatteryPower > 0)
        {
            Balls.Add(new Ball { StartX = 210, StartY = 100, EndX = 210, EndY = 300, Color = "green", Duration = "2.5s" });
        }

        InvokeAsync(StateHasChanged);
    }

    public class Ball
    {
        public int StartX { get; set; }
        public int StartY { get; set; }
        public int EndX { get; set; }
        public int EndY { get; set; }
        public string Color { get; set; }
        public string Duration { get; set; }
        public int X => StartX;
        public int Y => StartY;
    }

    public void Dispose()
    {
        _ballUpdateTimer?.Dispose();
    }

    private int? CalculateHomePower()
    {
        if (_pvValues == null)
        {
            return null;
        }

        if (_pvValues.InverterPower == null)
        {
            return null;
        }

        if (_pvValues.GridPower == null)
        {
            return null;
        }
        var homeBatteryPower = _pvValues.HomeBatteryPower ?? 0;
        var chargingPower = _pvValues.CarCombinedChargingPowerAtHome ?? 0;
        var homePower = _pvValues.InverterPower - _pvValues.GridPower - homeBatteryPower - chargingPower;
        return homePower;
    }
}