<MudPaper Class="d-flex justify-end flex-grow-1 gap-4 pr-2 mb-2" Elevation="0">
    @if (IsDisabled && !string.IsNullOrEmpty(DisabledToolTipText))
    {
        <MudTooltip>
            <ChildContent>
                <MudButton Color="@ButtonColor"
                           Variant="Variant.Filled"
                           StartIcon="@StartIcon"
                           Disabled="true"
                           ButtonType="ButtonType">@ButtonText</MudButton>
            </ChildContent>
            <TooltipContent>
                @DisabledToolTipText
            </TooltipContent>
        </MudTooltip>
    }
    else
    {
        <MudButton Disabled="IsLoading || IsDisabled"
                   Color="@ButtonColor"
                   Variant="Variant.Filled"
                   StartIcon="@StartIcon"
                   OnClick="AddButtonClicked"
                   ButtonType="ButtonType">
            @if (IsLoading)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <MudText>@ButtonText</MudText>
            }
            
        </MudButton>
    }
</MudPaper>

@code {
    [Parameter]
    public bool IsDisabled { get; set; }
    [Parameter]
    public string ButtonText { get; set; }
    [Parameter]
    public string StartIcon { get; set; }
    [Parameter]
    public string? DisabledToolTipText { get; set; }
    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public Color ButtonColor { get; set; } = Color.Primary;

    [Parameter]
    public ButtonType ButtonType { get; set; } = ButtonType.Button;

    [Parameter]
    public EventCallback OnButtonClicked { get; set; }

    private async Task AddButtonClicked()
    {
        await OnButtonClicked.InvokeAsync();
    }

}