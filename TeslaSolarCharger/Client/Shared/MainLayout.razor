@inherits LayoutComponentBase
@using System.Timers
@implements IDisposable

@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar
@inject HttpClient HttpClient

<MudThemeProvider @ref="@_mudThemeProvider" Theme="_tscTheme" />
<MudDialogProvider FullWidth="true"
                   MaxWidth="MaxWidth.Medium" />
<MudSnackbarProvider />

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://github.com/pkuehnel/TeslaSolarCharger/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code
{
    private MudThemeProvider? _mudThemeProvider;

    private string? _version;

    private Timer? _timer;

    readonly MudTheme _tscTheme = new MudTheme()
        {
            Palette = new PaletteLight()
            {
                Primary = "#1b6ec2",
                Secondary = "#6c757d",
                AppbarBackground = "#1b6ec2",
            },
        };


    protected override void OnInitialized()
    {
        _timer = new Timer();
        _timer.Interval = 30000;
        _timer.Elapsed += async (_, _) => await CheckVersion();
        _timer.Start();
    }

    private async Task CheckVersion()
    {
        try
        {
            var version = await HttpClient.GetStringAsync("api/Hello/ProductVersion");
            if (!string.IsNullOrEmpty(_version) && version != _version)
            {
                var reloadTimeout = TimeSpan.FromSeconds(10);
                Snackbar.Add($"New backend version detected. Page will autoreload in {reloadTimeout.TotalSeconds} seconds", Severity.Warning, config => { config.VisibleStateDuration = (int)reloadTimeout.TotalMilliseconds; });
                await Task.Delay(reloadTimeout);
                await JsRuntime.InvokeVoidAsync("location.reload");
            }

            _version = version;
        }
        catch (Exception ex)
        {
            return;
        }

        
    }

    public void Dispose()
    {
        _timer?.Stop();
        _timer?.Dispose();
    }
}
