@using System.Diagnostics
@using TeslaSolarCharger.Shared.Dtos
@using TeslaSolarCharger.Shared.Dtos.IndexRazor.PvValues
@using TeslaSolarCharger.Shared.Resources
@using TeslaSolarCharger.Shared.Resources.Contracts
@using System.Timers

@inject HttpClient HttpClient
@inject IConstants Constants


<svg width="600" height="400" viewBox="0 0 600 400">
    <!-- Lines -->
    <line x1="100" y1="200" x2="300" y2="100" stroke="black" />
    <line x1="100" y1="200" x2="300" y2="300" stroke="black" />
    <line x1="300" y1="100" x2="500" y2="200" stroke="black" />
    <line x1="300" y1="300" x2="500" y2="200" stroke="black" />

    <!-- Circles -->
    <circle cx="100" cy="200" r="40" fill="lightblue" />
    <circle cx="300" cy="100" r="40" fill="orange" />
    <circle cx="300" cy="300" r="40" fill="pink" />
    <circle cx="500" cy="200" r="40" fill="lightgreen" />

    <!-- Text -->
    <text x="100" y="205" text-anchor="middle">Grid @GridPower W</text>
    <text x="300" y="105" text-anchor="middle">Solar @SolarPower W</text>
    <text x="300" y="305" text-anchor="middle">Battery @BatteryPower W</text>
    <text x="500" y="205" text-anchor="middle">House @HousePower W</text>

    <!-- Animated balls -->
    @foreach (var ball in Balls)
    {
        <circle cx="@ball.X" cy="@ball.Y" r="5" fill="@ball.Color">
            <animate attributeName="cx" from="@ball.StartX" to="@ball.EndX" dur="@ball.Duration" repeatCount="indefinite" />
            <animate attributeName="cy" from="@ball.StartY" to="@ball.EndY" dur="@ball.Duration" repeatCount="indefinite" />
        </circle>
    }
</svg>

@code {
    public int GridPower { get; set; } = 16;
    public int SolarPower { get; set; } = 7311;
    public int BatteryPower { get; set; } = 3810;
    public int HousePower { get; set; } = 3485;

    private List<Ball> Balls { get; set; } = new List<Ball>();
    private Timer _timer;



    protected override void OnInitialized()
    {
        _timer = new Timer(1000);
        _timer.Elapsed += (sender, e) => UpdateBalls();
        _timer.Start();
    }

    private void UpdateBalls()
    {
        Balls.Clear();

        if (SolarPower > 0)
        {
            Balls.Add(new Ball { StartX = 300, StartY = 100, EndX = 500, EndY = 200, Color = "yellow", Duration = "2s" });
        }

        if (GridPower > 0)
        {
            Balls.Add(new Ball { StartX = 100, StartY = 200, EndX = 500, EndY = 200, Color = "blue", Duration = "3s" });
        }

        if (BatteryPower < 0)
        {
            Balls.Add(new Ball { StartX = 300, StartY = 300, EndX = 500, EndY = 200, Color = "red", Duration = "2.5s" });
        }
        else if (BatteryPower > 0)
        {
            Balls.Add(new Ball { StartX = 300, StartY = 100, EndX = 300, EndY = 300, Color = "green", Duration = "2.5s" });
        }

        InvokeAsync(StateHasChanged);
    }

    public class Ball
    {
        public int StartX { get; set; }
        public int StartY { get; set; }
        public int EndX { get; set; }
        public int EndY { get; set; }
        public string Color { get; set; }
        public string Duration { get; set; }
        public int X => StartX;
        public int Y => StartY;
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}